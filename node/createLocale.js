const fs = require("fs-extra");
const i18nStore = require("./i18n-store");
const path = require("path");
const shelljs = require("shelljs");
const babelParser = require("@babel/parser");
const babelTraverse = require("@babel/traverse");
const babelGenerator = require("@babel/generator");
let currentTime = new Date().getTime();

function getLocale() {
    const config = i18nStore.getConfig();
    const source = config.source;
    const languages = config.languages;
    const result = {};
    languages.forEach((_) => {
        result[_] = {};
    });

    shelljs.ls(path.join(process.cwd(), source)).forEach((file) => {
        const filePath = path.join(process.cwd(), `${source}/${file}`);
        const isFile = fs.statSync(filePath).isFile();

        if (isFile) {
            const fileString = fs.readFileSync(filePath, {encoding: "utf-8"});
            if ((file.endsWith("ts") || file.endsWith("tsx")) && (fileString.includes("<i18n") || fileString.includes("i18n("))) {
                const ast = babelParser.parse(fileString, {
                    sourceType: "module",
                    plugins: ["typescript", "jsx"],
                });
                babelTraverse.default(ast, {
                    CallExpression(path) {
                        // 函数调用
                        const i18nContainer = path.get("i18n").container;
                        if (!i18nContainer.callee.object) {
                            const arguments = i18nContainer.arguments;
                            const value = arguments && arguments[0] && arguments[0].value;
                            const language = arguments && arguments[1] && arguments[1].value;
                            const namespace = (arguments && arguments[2] && arguments[2].value) || "global";
                            if (!result[language][namespace]) {
                                result[language][namespace] = {};
                            }
                            if (!Object.values(result[language][namespace]).includes(value)) {
                                result[language][namespace][(currentTime++).toString(16)] = value;
                            }
                        }
                    },
                    ReturnStatement(path) {
                        // 编辑查找i18n标签
                        // console.log(path.node.argument.children[1].openingElement.attributes);
                        // const i18nContainer = path.get("i18n").argument;
                        // if (i18nContainer.type === "JSXElement") {
                        //     const attributes = i18nContainer.argument.openingElement.attributes;
                        //     console.log(attributes);
                        // }
                        // console.log(attributes);
                    },
                });
                // console.log(babelGenerator.default(ast));
            }
        } else {
            //
        }
    });
}

function createLocale() {
    const config = i18nStore.getConfig();
    const languages = config.languages;
    fs.ensureDirSync(path.join(process.cwd(), "/src/locale"));
    fs.ensureFileSync(path.join(process.cwd(), "/src/locale/index.ts"));
    let indexTemplate = `/*
    Attention: This file is generated by "dot-icon", do not modify
    ref: https://github.com/vocoWone/dot-i18n
*/\n\n`;
    languages.forEach((_) => {
        fs.ensureFileSync(path.join(process.cwd(), `/src/locale/${_}.ts`));
        fs.writeFileSync(path.join(process.cwd(), `/src/locale/${_}.ts`), `export default {}`);
        indexTemplate += `import ${_} from "./${_}";\n`;
    });
    indexTemplate += `\nexport default {${languages.join(", ")}};\n`;
    fs.writeFileSync(path.join(process.cwd(), "/src/locale/index.ts"), indexTemplate);
}

function generate() {
    getLocale();
    createLocale();
}

module.exports = generate;
