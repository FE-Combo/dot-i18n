import "./initialize";
import path from "path";
import fs from "fs-extra";
import XLSX from "xlsx";
import * as i18nStore from "./i18n-store";
import {spawn} from "./kit";

let result = {};

function generateLocale() {
    const config = i18nStore.getConfig();
    const languages = config?.languages;
    fs.ensureDirSync(path.join(process.cwd(), config?.localePath!));
    fs.ensureFileSync(path.join(process.cwd(), `${config?.localePath}/index.ts`));
    let indexTemplate = `/*
    Attention: This file is generated by "dot-icon", do not modify
    ref: https://github.com/vocoWone/dot-i18n
*/\n\n`;
    languages.forEach((_) => {
        fs.ensureFileSync(path.join(process.cwd(), `${config?.localePath}/${_}.ts`));
        fs.writeFileSync(path.join(process.cwd(), `${config?.localePath}/${_}.ts`), `export default ${JSON.stringify(result[_])}`);
        indexTemplate += `import ${_} from "./${_}";\n`;
    });
    indexTemplate += `\nexport default {${languages.join(", ")}};\n`;
    fs.writeFileSync(path.join(process.cwd(), `${config?.localePath}/index.ts`), indexTemplate);
}

function execute() {
    const config = i18nStore.getConfig();
    const allLocales = i18nStore.getLocales();
    const languages = config?.languages;
    const strict = config?.strict;
    const prettierConfig = config?.prettierConfig;
    const localePath = config?.localePath;
    if (allLocales) {
        result = allLocales;
    }
    const excelExportFilePath = process.cwd() + config?.importExcelPath;
    const workbook = XLSX.readFile(excelExportFilePath, {type: "binary"});
    const data = XLSX.utils.sheet_to_json(workbook.Sheets["Sheet1"]) as i18nStore.EXCELSheet[];

    if (strict) {
        data.forEach((_) => {
            languages!.forEach((__) => {
                if (_[__] && _.namespace && _.code) {
                    if (!allLocales?.[__]) {
                        allLocales![__] = {};
                    }
                    if (!allLocales![__][_.namespace]) {
                        allLocales![__][_.namespace] = {};
                    }
                    allLocales![__][_.namespace][_.code] = _[__];
                }
            });
        });
    } else {
        languages!.forEach((language) => {
            if (!allLocales![language]) {
                allLocales![language] = {};
            }

            data.forEach((_) => {
                const namespaces = _.code.split(".");
                let item = allLocales![language];
                let nextItemInstance = item;
                namespaces.forEach((namespace: string, index: number) => {
                    if (namespaces.length === index + 1) {
                        nextItemInstance[namespace] = _[language];
                    } else {
                        if (!nextItemInstance[namespace]) {
                            nextItemInstance[namespace] = {};
                        }
                        nextItemInstance = nextItemInstance[namespace];
                    }
                });
            });
        });
    }

    generateLocale();
    if (prettierConfig) {
        spawn("prettier", ["--config", path.join(process.cwd(), prettierConfig), "--write", path.join(process.cwd(), localePath + "/*")]);
    }
    console.info("Build successfully");
}

execute();
