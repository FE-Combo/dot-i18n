"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("./initialize");
var path_1 = tslib_1.__importDefault(require("path"));
var fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
var xlsx_1 = tslib_1.__importDefault(require("xlsx"));
var i18nStore = tslib_1.__importStar(require("./i18n-store"));
var kit_1 = require("./kit");
var result = {};
function generateLocale() {
    var config = i18nStore.getConfig();
    var languages = config === null || config === void 0 ? void 0 : config.languages;
    fs_extra_1.default.ensureDirSync(path_1.default.join(process.cwd(), config === null || config === void 0 ? void 0 : config.outDir));
    fs_extra_1.default.ensureFileSync(path_1.default.join(process.cwd(), (config === null || config === void 0 ? void 0 : config.outDir) + "/index.ts"));
    var indexTemplate = "/*\n    Attention: This file is generated by \"dot-icon\", do not modify\n    ref: https://github.com/vocoWone/dot-i18n\n*/\n\n";
    languages.forEach(function (_) {
        fs_extra_1.default.ensureFileSync(path_1.default.join(process.cwd(), (config === null || config === void 0 ? void 0 : config.outDir) + "/" + _ + ".ts"));
        fs_extra_1.default.writeFileSync(path_1.default.join(process.cwd(), (config === null || config === void 0 ? void 0 : config.outDir) + "/" + _ + ".ts"), "export default " + JSON.stringify(result[_]));
        indexTemplate += "import " + _ + " from \"./" + _ + "\";\n";
    });
    indexTemplate += "\nexport default {" + languages.join(", ") + "};\n";
    fs_extra_1.default.writeFileSync(path_1.default.join(process.cwd(), (config === null || config === void 0 ? void 0 : config.outDir) + "/index.ts"), indexTemplate);
}
function execute() {
    var config = i18nStore.getConfig();
    var allLocales = i18nStore.getLocales();
    var languages = config === null || config === void 0 ? void 0 : config.languages;
    var strict = config === null || config === void 0 ? void 0 : config.strict;
    var prettierConfig = config === null || config === void 0 ? void 0 : config.prettierConfig;
    var outDir = config === null || config === void 0 ? void 0 : config.outDir;
    if (allLocales) {
        result = allLocales;
    }
    var excelExportFilePath = process.cwd() + (config === null || config === void 0 ? void 0 : config.importExcelPath);
    var workbook = xlsx_1.default.readFile(excelExportFilePath, { type: "binary" });
    var data = xlsx_1.default.utils.sheet_to_json(workbook.Sheets["Sheet1"]);
    if (strict) {
        data.forEach(function (_) {
            languages.forEach(function (__) {
                if (_[__] && _.namespace && _.code) {
                    if (!(allLocales === null || allLocales === void 0 ? void 0 : allLocales[__])) {
                        allLocales[__] = {};
                    }
                    if (!allLocales[__][_.namespace]) {
                        allLocales[__][_.namespace] = {};
                    }
                    allLocales[__][_.namespace][_.code] = _[__];
                }
            });
        });
    }
    else {
        languages.forEach(function (language) {
            if (!allLocales[language]) {
                allLocales[language] = {};
            }
            data.forEach(function (_) {
                var namespaces = _.code.split(".");
                var item = allLocales[language];
                var nextItemInstance = item;
                namespaces.forEach(function (namespace, index) {
                    if (namespaces.length === index + 1) {
                        nextItemInstance[namespace] = _[language];
                    }
                    else {
                        if (!nextItemInstance[namespace]) {
                            nextItemInstance[namespace] = {};
                        }
                        nextItemInstance = nextItemInstance[namespace];
                    }
                });
            });
        });
    }
    generateLocale();
    if (prettierConfig) {
        kit_1.spawn("prettier", ["--config", path_1.default.join(process.cwd(), prettierConfig), "--write", path_1.default.join(process.cwd(), outDir + "/*")]);
    }
    console.info("Build successfully");
}
execute();
